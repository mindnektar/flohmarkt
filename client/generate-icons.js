import fs from 'fs';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';
import svg2ttf from 'svg2ttf';
import SVGIcons2SVGFontStream from 'svgicons2svgfont';
import { StringDecoder } from 'string_decoder';

const getSvgFiles = (folderPath) => (
    fs
        .readdirSync(folderPath, 'utf-8')
        .filter((file) => typeof file === 'string' && path.extname(file) === '.svg')
        .map((file) => path.join(folderPath, file))
);

const buildSVG = (unicodeMap) => (
    new Promise((resolve, reject) => {
        const fontStream = new SVGIcons2SVGFontStream({
            fontHeight: 1000,
            fontId: 'icon-font',
            normalize: true,
            weight: 400,
            log: () => {},
        });

        const decoder = new StringDecoder('utf8');
        let content = '';

        fontStream
            .on('data', (chunk) => {
                content += decoder.write(chunk);
            })
            .on('finish', () => {
                resolve(content);
            })
            .on('error', (err) => {
                if (err) {
                    reject(err);
                }
            });

        getSvgFiles(path.resolve('font-icons')).forEach((svgPath) => {
            const name = path.basename(svgPath, '.svg');
            const glyph = fs.createReadStream(svgPath);

            glyph.metadata = { unicode: [unicodeMap[name]], name };
            fontStream.write(glyph);
        });

        fontStream.end();
    })
);

(async () => {
    let startUnicode = 0xe800;
    const unicodeMap = getSvgFiles(path.resolve('font-icons'))
        .reduce((acc, curr) => {
            const name = path.basename(curr, '.svg');

            acc[name] = String.fromCharCode(startUnicode);
            startUnicode += 1;

            return acc;
        }, {});

    const cssString = Object.keys(unicodeMap)
        .map((name) => `    &--${name}:before\n        content: '\\${unicodeMap[name].charCodeAt(0).toString(16)}'\n`)
        .join('\n');

    const iconNames = Object.keys(unicodeMap).map((iconName) => `    '${iconName}',`);

    const iconJs = `// WARNING! THIS FILE IS GENERATED BY make generate-icons
export default [
${iconNames.join('\n')}
];
`;

    fs.writeFileSync('application/helpers/icons.js', iconJs);

    const sass = `// WARNING! THIS FILE IS GENERATED BY make generate-icons
// stylelint-disable

@font-face
    font-family: 'iconfont'
    src: url('/font/icon-font.ttf?${uuidv4()}')
    font-weight: normal
    font-style: normal

.ui-icon
    align-items: center
    display: flex
    font-family: 'iconfont'
    font-weight: normal
    justify-content: center

${cssString}`;

    fs.writeFileSync('application/style/ui/atoms/icon.sass', sass);

    const svgString = await buildSVG(unicodeMap);

    const ttf = svg2ttf(svgString, {});

    fs.writeFileSync('public/font/icon-font.ttf', Buffer.from(ttf.buffer));
})();
